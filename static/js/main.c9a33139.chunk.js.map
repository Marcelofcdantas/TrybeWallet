{"version":3,"sources":["money.jpg","components/form.js","pages/Login.js","actions/index.js","components/header.js","components/tableHead.js","components/table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/table.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","giveValue","Login","props","state","email","password","isBlocked","onChangeEmail","bind","handleChange","this","test","length","setState","e","preventDefault","getUser","history","push","target","value","id","className","src","imagem","alt","htmlFor","type","onChange","data-testid","disabled","onClick","handleClick","React","Component","connect","dispatch","payload","userName","Header","theEmail","totalExpended","toFixed","user","expenses","wallet","reduce","acc","cur","parseFloat","exchangeRates","currency","ask","Form","data","count","getData","getValue","fetch","json","USDT","document","querySelector","description","money","method","tag","currencies","paperMoney","Object","keys","filter","name","map","key","then","response","receivedCurrency","getTable","TableHead","Table","deletingRow","children","innerText","parentNode","removeChild","database","expense","split","find","addTable","table","showTable","removeOutlay","Wallet","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","addingToTotal","moeda","total","undefined","console","log","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9a33139.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/money.b7e5e470.jpg\";","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrencyExchange, addOutlay, shouldShowTable } from '../actions';\n\nlet giveValue;\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      count: 0,\n    };\n    this.getData = this.getData.bind(this);\n  }\n\n  componentDidMount() {\n    const { getValue } = this.props;\n    getValue();\n  }\n\n  async getData() {\n    const { wallet } = this.props;\n    const { count } = this.state;\n    const exchangeRates = await (await fetch('https://economia.awesomeapi.com.br/json/all')).json();\n    delete exchangeRates.USDT;\n    const { value } = document.querySelector('#valor');\n    const description = document.querySelector('#descricao').value;\n    const money = document.querySelector('#moeda').value;\n    const method = document.querySelector('#metodo').value;\n    const tag = document.querySelector('#tag').value;\n    this.setState({\n      data: {\n        id: count, value, description, currency: money, method, tag, exchangeRates },\n    });\n    this.setState({ count: count + 1 });\n    const { data } = this.state;\n    giveValue = data;\n    wallet(giveValue);\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const paperMoney = Object.keys(currencies).filter((currency) => currency !== 'USDT');\n    return (\n      <form>\n        <label htmlFor=\"valor\">\n          Valor:\n          <input type=\"text\" name=\"valor\" id=\"valor\" data-testid=\"value-input\" />\n        </label>\n        <label htmlFor=\"descricao\">\n          Descrição:\n          <input\n            type=\"text\"\n            name=\"descricao\"\n            id=\"descricao\"\n            data-testid=\"description-input\"\n          />\n        </label>\n        <label htmlFor=\"moeda\">\n          Moeda:\n          <select name=\"moeda\" id=\"moeda\" data-testid=\"currency-input\">\n            {paperMoney.map((money) => <option key={ money }>{ money }</option>)}\n          </select>\n        </label>\n        <label htmlFor=\"metodo\" data-testid=\"method-input\">\n          Método de pagamento:\n          <select name=\"metodo\" id=\"metodo\">\n            <option>Dinheiro</option>\n            <option>Cartão de crédito</option>\n            <option>Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Tag:\n          <select name=\"tag\" id=\"tag\" data-testid=\"tag-input\">\n            <option>Alimentação</option>\n            <option>Lazer</option>\n            <option>Trabalho</option>\n            <option>Transporte</option>\n            <option>Saúde</option>\n          </select>\n        </label>\n        <button type=\"button\" onClick={ this.getData }>\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getValue: () => dispatch(fetchCurrencyExchange()),\n  wallet: () => dispatch(addOutlay(giveValue)),\n  getTable: () => dispatch(shouldShowTable(true)),\n});\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nForm.propTypes = {\n  getValue: PropTypes.func.isRequired,\n  currencies: PropTypes.objectOf(PropTypes.string).isRequired,\n  wallet: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport imagem from '../money.jpg';\nimport { userName } from '../actions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      isBlocked: false,\n    };\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // validação do email feita através do código do artigo abaixo\n  // https://www.horadecodar.com.br/2020/09/13/como-validar-email-com-javascript/\n  // ajudado pelo João Andrade Jr que recomendou juntar as funções de\n  // validação de email e password em uma só\n  onChangeEmail() {\n    const { email, password } = this.state;\n    const size = 6;\n    const regex = /\\S+@\\S+\\.\\S+/;\n    const isBlocked = regex.test(email) && password.length >= size;\n    this.setState({\n      isBlocked,\n    });\n  }\n\n  // requisito 3 refeito com ajuda do Nilson e Tiago Santos\n  // visto que não estava passando o estado para o redux\n  handleClick(e) {\n    e.preventDefault();\n    const { email } = this.state;\n    const { getUser, history } = this.props;\n    getUser(email);\n    history.push('/carteira');\n  }\n\n  handleChange(e) {\n    const { value, id } = e.target;\n    this.setState({\n      [id]: value,\n    }, () => this.onChangeEmail());\n  }\n\n  render() {\n    const { email, password, isBlocked } = this.state;\n    return (\n      <div className=\"mainLogin\">\n        Pocket Login\n        <img src={ imagem } alt=\"imagem bolso\" />\n        <label htmlFor=\"email\">\n          Email\n          <br />\n          <input\n            type=\"text\"\n            id=\"email\"\n            className=\"email\"\n            value={ email }\n            onChange={ (e) => this.handleChange(e) }\n            data-testid=\"email-input\"\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Password\n          <br />\n          <input\n            type=\"password\"\n            id=\"password\"\n            onChange={ (e) => this.handleChange(e) }\n            className=\"password\"\n            value={ password }\n            data-testid=\"password-input\"\n          />\n        </label>\n        <button\n          type=\"button\"\n          disabled={ !isBlocked }\n          onClick={ (e) => this.handleClick(e) }\n        >\n          Entrar\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getUser: (email) => dispatch(userName(email)),\n});\n\nLogin.propTypes = {\n  history: PropTypes.string.isRequired,\n  getUser: PropTypes.string.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","export const LOGIN = 'LOGIN';\n\nexport const userName = (email) => ({\n  type: LOGIN,\n  payload: email,\n});\n\nexport const SHOW = 'SHOW';\n\nexport const shouldShowTable = (payload) => ({\n  type: SHOW,\n  payload,\n});\n\nexport const ADD_OUTLAY = 'ADD_OUTLAY';\nexport const REMOVE_OUTLAY = 'REMOVE_OUTLAY';\n// export const EDIT_OUTLAY = 'EDIT_OUTLAY';\n\nexport const addOutlay = (data) => ({\n  type: ADD_OUTLAY,\n  expenses: data,\n});\n\nexport const removeOutlay = (expense) => ({\n  type: REMOVE_OUTLAY,\n  payload: {\n    expense,\n  },\n});\n\n// export const editOutlay = (outLay) => ({\n//   type: EDIT_OUTLAY,\n//   outLay,\n// });\n\nexport const REQUEST_CURRENCY = 'REQUEST_CURRENCY';\nconst requestCurrency = () => ({\n  type: REQUEST_CURRENCY,\n});\n\nexport const RECEIVED_CURRENCY = 'RECEIVED_CURRENCY';\nconst receivedCurrency = (currency) => ({\n  type: RECEIVED_CURRENCY,\n  currencies: currency });\n\nexport function fetchCurrencyExchange() {\n  return (dispatch) => {\n    dispatch(requestCurrency());\n    return fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((currency) => dispatch(receivedCurrency(currency)));\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  render() {\n    const { theEmail, totalExpended } = this.props;\n    return (\n      <>\n        <h5 data-testid=\"email-field\">\n          { theEmail }\n        </h5>\n        <h5 data-testid=\"total-field\">\n          { totalExpended.toFixed(2) }\n        </h5>\n        <h5 data-testid=\"header-currency-field\"> BRL </h5>\n      </>\n    );\n  }\n}\n\n// forma de somar os valores no mapStateToProps vista no repositório de Wanderson\n// https://github.com/tryber/sd-010-a-project-trybewallet/pull/20\nconst mapStateToProps = (state) => ({\n  theEmail: state.user.email,\n  expenses: state.wallet.expenses,\n  totalExpended: state.wallet.expenses.reduce(\n    (acc, cur) => parseFloat(cur.value * cur.exchangeRates[cur.currency].ask) + acc, 0,\n  ),\n});\n\nHeader.propTypes = {\n  theEmail: PropTypes.string.isRequired,\n  totalExpended: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\n\nclass TableHead extends React.Component {\n  render() {\n    return (\n      <thead>\n        <tr>\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Editar/Excluir</th>\n        </tr>\n      </thead>\n    );\n  }\n}\n\nexport default TableHead;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { removeOutlay } from '../actions';\nimport TableHead from './tableHead';\n\n// resolução para o problema do map dos dados vista no repositório de Wanderson\n// https://github.com/tryber/sd-010-a-project-trybewallet/pull/20\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.deletingRow = this.deletingRow.bind(this);\n  }\n\n  deletingRow(id) {\n    const value = parseFloat(id.children[6].innerText);\n    const { wallet } = this.props;\n    wallet(value);\n    id.parentNode.removeChild(id);\n  }\n\n  render() {\n    const { database, wallet } = this.props;\n    return (\n      <table>\n        <TableHead />\n        <tbody>\n          { database.map((expense) => (\n            <tr key={ expense.id }>\n              <td>{ expense.description }</td>\n              <td>{ expense.tag }</td>\n              <td>{ expense.method }</td>\n              <td>{ expense.value }</td>\n              <td>\n                { expense.exchangeRates[\n                  Object.keys(expense.exchangeRates)\n                    .filter((key) => key === expense.currency)\n                ].name.split('/')[0] }\n              </td>\n              <td>\n                { parseFloat(expense.exchangeRates[\n                  Object.keys(expense.exchangeRates)\n                    .find((key) => key === expense.currency)\n                ].ask).toFixed(2) }\n              </td>\n              <td>\n                { (expense.value * expense.exchangeRates[\n                  Object.keys(expense.exchangeRates)\n                    .filter((key) => key === expense.currency)\n                ].ask).toFixed(2) }\n              </td>\n              <td>Real</td>\n              <td>\n                <button\n                  type=\"button\"\n                  data-testid=\"delete-btn\"\n                  onClick={ (e) => {\n                    e.preventDefault();\n                    wallet(expense);\n                  } }\n                >\n                  Excluir\n                </button>\n                <button type=\"button\" data-testid=\"edit-btn\">Editar despesa</button>\n              </td>\n            </tr>\n          )) }\n        </tbody>\n      </table>);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  database: state.wallet.expenses,\n  addTable: state.table.showTable,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  wallet: (expense) => dispatch(removeOutlay(expense)),\n});\n\nTable.propTypes = {\n  database: PropTypes.objectOf(PropTypes.string).isRequired,\n  wallet: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/header';\nimport Form from '../components/form';\nimport Table from '../components/table';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        TrybeWallet\n        <Header />\n        <Form />\n        <Table />\n      </div>);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n  // password: '',\n};\n\nfunction getUser(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case LOGIN:\n    return { email: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default getUser;\n","import {\n  RECEIVED_CURRENCY,\n  ADD_OUTLAY,\n  REMOVE_OUTLAY,\n  // EDIT_OUTLAY,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  totalExpended: 0,\n};\n\nconst addingToTotal = ({ totalExpended }, action) => {\n  const { currency } = action.expenses;\n  const moeda = currency;\n  const total = totalExpended;\n  if (total === 0 || total === undefined) {\n    return (\n      action.expenses.exchangeRates[moeda].ask\n      * action.expenses.value).toFixed(2);\n  } return (\n    (parseFloat(total)\n    + parseFloat(action.expenses.exchangeRates[moeda].ask\n    * action.expenses.value)).toFixed(2));\n};\n\n// lógica para excluir linha da tabela vista no repositório do Wanderson\nfunction wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case RECEIVED_CURRENCY:\n    console.log(action);\n    return { ...state, currencies: action.currencies };\n  case ADD_OUTLAY:\n    return { ...state,\n      expenses: [...state.expenses, { ...action.expenses }],\n      totalExpended: addingToTotal(state, action),\n    };\n  case REMOVE_OUTLAY:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses.filter((expense) => expense.id !== action.payload.expense.id),\n      ],\n    };\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { SHOW } from '../actions';\n\nconst INITIAL_STATE = {\n  showTable: false,\n};\n\nfunction getTable(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SHOW:\n    return { showTable: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default getTable;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\nimport table from './table';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n  table,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\n// store.subscribe(() => console.log(store.getState()));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport './Login.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change unregister()\n// to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}